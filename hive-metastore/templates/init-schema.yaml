apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "hive-metastore.fullname" . }}-db-init-schema
spec:
  template:
    spec:
      containers:
      - name: hivemeta
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command: ["/bin/sh", "-c"]
        args:
          - >
            if schematool -dbType postgres -passWord "{{- .Values.connections.database.password }}" -userName "{{- .Values.connections.database.username }}" -url "jdbc:postgresql://{{- tpl .Values.connections.database.host . }}:{{- .Values.connections.database.port }}/{{- .Values.connections.database.database }}" -validate | grep -q "\[SUCCESS\]"; 
            then 
              echo "Schema already exists and is valid. Skipping initialization."; 
            else 
              schematool --verbose -initSchema -dbType postgres -passWord "{{- .Values.connections.database.password }}" -userName "{{- .Values.connections.database.username }}" -url "jdbc:postgresql://{{- tpl .Values.connections.database.host . }}:{{- .Values.connections.database.port }}/{{- .Values.connections.database.database }}"; 
            fi
        volumeMounts:
        - name: hive-config
          mountPath: /opt/hive-metastore/conf
        env:
          {{- if .Values.extraEnvVars }}
          {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
          {{- end }}
      volumes:
      - name: hive-config
        configMap:
          name: {{ include "hive-metastore.fullname" . }}
      restartPolicy: Never
  backoffLimit: 3
